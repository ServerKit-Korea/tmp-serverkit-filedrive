name: Versioning and Overwrite & Publish

on:
    workflow_dispatch:
        inputs:
            overwrite_tag:
                description: "Overwrite existing tag? (main branch will always set this to false)"
                required: true
                default: "false"
                type: choice
                options:
                    - "true"
                    - "false"
            version_type:
                description: "Version increment type (major, minor, patch)"
                required: false
                default: "patch"
                type: choice
                options:
                    - major
                    - minor
                    - patch
            build_mode:
                description: "Build mode (dev or release)"
                required: true
                default: "release"
                type: choice
                options:
                    - dev
                    - release

jobs:
    version-and-tag:
        runs-on: ubuntu-latest

        steps:
            # 1. Checkout repository
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  node-version: 20 # 로컬 환경과 동일한 Node.js 버전
                  cache: "npm"

            # 2. Run create_npmrc.sh script to generate .npmrc (npmrc를 임시로 생성하는 로직)
            - name: Create .npmrc file
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  chmod +x .github/create_npmrc.sh
                  ./.github/create_npmrc.sh

            # 3. Determine current branch
            - name: Get current branch
              id: branch
              run: |
                  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
                  echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV

            # 4. Install dependencies
            - name: Install dependencies
              run: |
                  rm -rf node_modules package-lock.json
                  npm install

            # 5. Determine version and tag
            - name: Determine version and tag
              id: version
              run: |
                  if [[ "${{ env.CURRENT_BRANCH }}" == "main" ]]; then
                    echo "Main branch detected. Overwrite disabled."
                    echo "OVERWRITE_TAG=false" >> $GITHUB_ENV
                    CURRENT_VERSION=$(cat package.json | jq -r '.version')
                    IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
                    if [[ "${{ inputs.version_type }}" == "major" ]]; then
                      MAJOR=$((MAJOR + 1))
                      MINOR=0
                      PATCH=0
                    elif [[ "${{ inputs.version_type }}" == "minor" ]]; then
                      MINOR=$((MINOR + 1))
                      PATCH=0
                    else
                      PATCH=$((PATCH + 1))
                    fi
                    NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                    echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
                  else
                    echo "Non-main branch detected. Overwrite option: ${{ inputs.overwrite_tag }}"
                    echo "OVERWRITE_TAG=${{ inputs.overwrite_tag }}" >> $GITHUB_ENV
                    NEW_VERSION="0.0.1-${{ env.CURRENT_BRANCH }}-${{ inputs.build_mode }}"
                    echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
                  fi

            # 6. Commit version update for main branch
            - name: Commit version update
              if: ${{ env.CURRENT_BRANCH == 'main' }}
              run: |
                  jq ".version = \"$NEW_VERSION\"" package.json > package.tmp.json
                  mv package.tmp.json package.json
                  git config user.name "GitHub Actions"
                  git config user.email "actions@github.com"
                  git add package.json
                  git commit -m "Bump version to $NEW_VERSION"
                  git push origin main

            # 7. Build project
            - name: Build project
              run: |
                  if [[ "${{ inputs.build_mode }}" == "dev" ]]; then
                    npm run build:dev
                  else
                    npm run build:release
                  fi

            # 8. Create and push tag, publish (git packages에 배포)
            - name: Create and push tag
              run: |
                  if [[ "${{ env.OVERWRITE_TAG }}" == "true" ]]; then
                    git tag -f "v${{ env.NEW_VERSION }}"
                    git push origin -f "v${{ env.NEW_VERSION }}"
                  else
                    git tag "v${{ env.NEW_VERSION }}"
                    git push origin "v${{ env.NEW_VERSION }}"
                  fi

            # 9. Publish package
            - name: Publish package
              if: ${{ env.CURRENT_BRANCH == 'main' }}
              run: npm publish
